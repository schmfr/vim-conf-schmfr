set modelines=0         " no modelines due to security concerns [http://www.guninski.com/vim1.html]
"let g:secure_modelines_verbose=1 " securemodelines vimscript

" general settings
"http://vimdoc.sourceforge.net/htmldoc/vimfaq.html

" Set Encoding
set encoding=utf8

" Setup Spellchecker
autocmd Filetype mail setlocal spell spelllang=de_20,en_us
autocmd Filetype mail syntax spell toplevel
autocmd Filetype html setlocal spell spelllang=de_20,en_us
autocmd Filetype html syntax spell toplevel
autocmd Filetype php setlocal spell spelllang=de_20,en_us
autocmd Filetype php syntax spell toplevel
autocmd Filetype tex setlocal spell spelllang=de_20,en_us
autocmd Filetype tex syntax spell toplevel

filetype plugin indent on


"""""""""""""""""""""""""""""
" Feel
"""""""""""""""""""""""""""""

set backspace=eol,start,indent              " allow backspacing over indent, eol, & start
set undolevels=1000                         " number of forgivable mistakes
set updatecount=100                         " write swap file to disk every 100 chars
set complete=.,w,b,u,U,t,i,d                " do lots of scanning on tab completion
set nocompatible                            " vim defaults, not vi!
set ignorecase                              " ignore case
set wildmode=longest,list                   " autocomplete like the bash
set completeopt=longest,menuone             " chance completemode to get a more natural feeling see http://vim.wikia.com/wiki/Make_Vim_completion_popup_menu_work_just_like_in_an_IDE
let maplocalleader=','                      " all my macros start with ,
let mapleader=','                           " all my macros start with ,
set autoread                                " watch for file changes by other programs
set textwidth=79                            " set textwidth
set formatoptions+=l                         "do not auto-wrap long lines
"set more                                    " the 'more' prompt
"set backup                                  " produce *~ backup files
"set backupext=~                             " add ~ to the end of backup files
"set patchmode=~                             " only produce *~ if not there
"set wildmenu                                " : menu has tab completion, etc

"setup some cursor-keys in insert mode
"see also :he 'winaltkeys'
imap <M-k> <Up>
imap <M-h> <Left>
imap <M-j> <Down>
imap <M-l> <Right>


"""""""""""""""""""""""""""""
" Tabstops
"""""""""""""""""""""""""""""

" Tabs
"set smarttab                    " make <tab> and <backspace> smarter
set tabstop=4
set softtabstop=0
set noexpandtab
set list
set listchars=tab:\|\ 
set shiftwidth=4
set autoindent smartindent      " turn on auto/smart indenting


"""""""""""""""""""""""""""""
" Look
"""""""""""""""""""""""""""""

" Enable syntax (do it before loading the colorscheme)
" Set colorscheme and set g:colors_name (this is necessary due to a spelling
" error in the bundle/Color_Sampler-Pack/papayawhip.vim file where it is set
" to "PapayaWhip"
if has('gui_running') | colorscheme papayawhip | let g:colors_name = "papayawhip" | else | colorscheme navajo | endif
" Other nice colorschemes: moria, navajo-night
syntax on

set showcmd
set showbreak=>\ 
set visualbell                  " visual beep
set scrolloff=5                 " keep at least 5 lines above/below cursor
set sidescrolloff=5             " keep at least 5 columns left/right of cursor
set history=200                 " remember the last 200 commands

" searching...
set hlsearch                   " enable search highlight globally
set incsearch                  " show matches as soon as possible
set showmatch                  " show matching brackets when typing

set diffopt=filler,iwhite       " ignore all whitespace and sync

" disable last one highlight
nmap <LocalLeader>nh :nohlsearch<cr>

"Set more simultanueous Tabs
set tabpagemax=50

"remove Toolbars
set guioptions-=m
set guioptions-=T
"remove scrollbars
set guioptions-=r
set guioptions-=L

"statusline 
set statusline= 
set statusline+=%<\                       " cut at start 
set statusline+=%2*[%n%H%M%R%W]%*\        " flags 
set statusline+=%-40f\                    " path 
set statusline+=%=%1*%y%*%*\              " file type 
set statusline+=%10((%l,%c)%)\            " line and column 
set statusline+=%P                        " percentage of file 
set laststatus=2                          " always show statusline


"""""""""""""""""""""""""""""
" Tabs & Buffers
"""""""""""""""""""""""""""""

set hidden                      " allow editing multiple unsaved buffers
set noautowrite                 " don't automatically write on :next, etc

map <LocalLeader>tc :tabnew %<cr>    " create a new tab       
map <LocalLeader>td :tabclose<cr>    " close a tab
map <LocalLeader>tn :tabnext<cr>     " next tab
map <LocalLeader>tp :tabprev<cr>     " previous tab
map <LocalLeader>tm :tabmove         " move a tab to a new location

"jump between different tabs quickly
nmap <M-o> :tabnext<CR>
nmap <M-i> :tabNext<CR>

"map <M-#> to :b#<CR> for a quicker change between buffers
nnoremap <M-1> :b1<CR>
nnoremap <M-2> :b2<CR>
nnoremap <M-3> :b3<CR>
nnoremap <M-4> :b4<CR>
nnoremap <M-5> :b5<CR>
nnoremap <M-6> :b6<CR>
nnoremap <M-7> :b7<CR>
nnoremap <M-8> :b8<CR>
nnoremap <M-9> :b9<CR>

"  buffer management, note 'set hidden' above
" Move to next buffer
map <LocalLeader>bn :bn<cr>
" Move to previous buffer
map <LocalLeader>bp :bp<cr>
" List open buffers
map <LocalLeader>bb :ls<cr>

"tabulator um durch den buffer zu wechseln
nnoremap <S-Tab> :bnext<CR>
"nnoremap <C-Tab> :bnext<CR>
"nnoremap <S-C-Tab> :bprevious<CR>


"""""""""""""""""""""""""""""
" MISC
"""""""""""""""""""""""""""""

" IMPORTANT: grep will sometimes skip displaying the file name if you
" search in a singe file. This will confuse latex-suite. Set your grep
" program to alway generate a file-name.
set grepprg=grep\ -nH\ $*

" IMPORTANT: win32 users will need to have 'shellslash' set so that latex
" can be called correctly.
set shellslash

"Printer
set printexpr=system('kprinter'\ .\ '\ '\ .\ v:fname_in)\ .\ delete(v:fname_in)\ +\ v:shell_error

" change directory to that of current file
nmap <LocalLeader>cd :cd%:p:h<cr>
" change local directory to that of current file
nmap <LocalLeader>lcd :lcd%:p:h<cr>
" word swapping
nmap <silent> gw "_yiw:s/\(\%#\w\+\)\(\W\+\)\(\w\+\)/\3\2\1/<cr><c-o><c-l>
" char swapping
nmap <silent> gc xph
" save and build
nmap <LocalLeader>wm  :w<cr>:make<cr>

" some useful mappings for using vim via ssh
noremap  
xnoremap  
snoremap  
noremap!  
lnoremap  

" insert newline in normal mode (opposite of <S-J>)
nmap <LocalLeader>n i<CR><ESC>


"""""""""""""""""""""""""""""
" TAGS
"""""""""""""""""""""""""""""

" Jump to a tag easier
map <c-y> <c-]>

" add one directory above the current file to the tags setting
:set tags+=./../tags

" mappings to work with tags in preview window
inoremap <M-q> <C-o>:ptag /<C-r><C-W><CR>
inoremap <M-w> <C-o>:ptprevious<CR>
inoremap <M-e> <C-o>:ptnext<CR>
inoremap <M-r> <C-o><C-W><C-Z>

"prevent NERD_Commenter from echoing "Unknown filetype" messages
"let NERDShutUp=1

"""""""""""""""""""""""""""""
" Improved * and # behavier 
"""""""""""""""""""""""""""""

"for search the selected word in visual mode
"see http://got-ravings.blogspot.com/2008/07/vim-pr0n-visual-search-mappings.html
function! s:VSetSearch()
  let temp = @@
  norm! gvy
  let @/ = '\V' . substitute(escape(@@, '\'), '\n', '\\n', 'g')
  let @@ = temp
endfunction

vnoremap * :<C-u>call <SID>VSetSearch()<CR>//<CR>
vnoremap # :<C-u>call <SID>VSetSearch()<CR>??<CR>


"""""""""""""""""""""""""""""
" Unused
"""""""""""""""""""""""""""""

" see http://www.vim.org/scripts/script.php?script_id=2407
"source $VIMRUNTIME/macros/matchit.vim 
"autocmd BufEnter *.m    compiler mlint 


"function SearchBib(first, ...)
  "let keywords = a:first
  "for morekeywords in a:000
     "let keywords = a:first . ' ' . morekeywords
  "endfor
  "cexpr system('bibgrep' . ' ' . keywords)
  "copen
"endfunction

""set up the dictionary
"let g:trv_dictionary="~/.vim/dictionary/de-en.txt" 


""see http://www.mail-archive.com/vim-latex-devel@lists.sourceforge.net/msg00014.html
"map ,b  :Bibgrep 
"command -nargs=* Bibgrep call SearchBib(<f-args>)
